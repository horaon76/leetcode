package BITS;
/**
 * Reverse bits of a given 32 bits unsigned integer.
 *
 * Note:
 *
 * Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
 * In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 *
 *
 * Example 1:
 *
 * Input: n = 00000010100101000001111010011100
 * Output:    964176192 (00111001011110000010100101000000)
 * Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
 * Example 2:
 *
 * Input: n = 11111111111111111111111111111101
 * Output:   3221225471 (10111111111111111111111111111111)
 * Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 *
 *
 * Constraints:
 *
 * The input must be a binary string of length 32
 *
 *
 * Follow up: If this function is called many times, how would you optimize it?
 * **/
public class ReverseBits190 {
    public static int reverseBits(int n) {
        int result = 0;

        for (int i = 0; i < 32; i++) {
            result <<= 1;            // Shift result to the left
            result |= (n & 1);       // Add the least significant bit of n to result
            n >>= 1;                 // Shift n to the right
        }

        return result;                // Return the reversed bits
    }

    public static void main(String[] args) {
        int n = 43261596;  // Example input
        int reversed = reverseBits(n);
        System.out.println("Reversed bits: " + reversed);  // Output: 964176192
    }
}
/**
 *
 * ### Code Snippet for Reversing Bits of an Int
 *
 * Here’s the code we’ll use for the dry run:
 *
 * ```java
 * public class BitReversal {
 *     public static void main(String[] args) {
 *         int n = 0b00000000000000000000000000001011;  // Binary representation: 11 in decimal
 *
 *         int reversedBits = 0;
 *         for (int i = 0; i < 32; i++) { // Loop for 32 bits
 *             reversedBits <<= 1;            // Shift left
 *             reversedBits |= (n & 1);       // Add the least significant bit of n
 *             n >>= 1;                       // Shift right
 *         }
 *
 *         System.out.println("Reversed bits: " + Integer.toBinaryString(reversedBits));
 *     }
 * }
 * ```
 *
 * ### Initial Values
 * - **Input**: `n = 0b00000000000000000000000000001011` (which is `11` in decimal)
 * - **Binary Representation of `n` (32 bits)**: `00000000000000000000000000001011`
 * - **Reversed Bits**: `reversedBits = 0` (Binary: `00000000000000000000000000000000`)
 *
 * ### Complete Dry Run
 *
 * | Step | i | n (before shift)                               | LSB of n | reversedBits (before shift)                   | reversedBits (after shift)                    | reversedBits (after OR)                        | n (after shift)                               |
 * |------|---|------------------------------------------------|----------|------------------------------------------------|------------------------------------------------|------------------------------------------------|------------------------------------------------|
 * | 0    | 0 | 00000000000000000000000000001011               | 1        | 00000000000000000000000000000000               | 00000000000000000000000000000000               | 00000000000000000000000000000001               | 000000000000000000000000000001011               |
 * | 1    | 1 | 000000000000000000000000000001011               | 1        | 00000000000000000000000000000001               | 00000000000000000000000000000010               | 00000000000000000000000000000011               | 000000000000000000000000000000101               |
 * | 2    | 2 | 000000000000000000000000000000101               | 1        | 00000000000000000000000000000011               | 00000000000000000000000000000110               | 00000000000000000000000000001111               | 00000000000000000000000000000010               |
 * | 3    | 3 | 00000000000000000000000000000010                | 0        | 00000000000000000000000000001111               | 00000000000000000000000000001110               | 00000000000000000000000000001111               | 00000000000000000000000000000001               |
 * | 4    | 4 | 00000000000000000000000000000001                | 1        | 00000000000000000000000000001111               | 00000000000000000000000000011110               | 00000000000000000000000000011111               | 00000000000000000000000000000000               |
 * | 5    | 5 | 00000000000000000000000000000000                | 0        | 00000000000000000000000000011111               | 00000000000000000000000000111110               | 00000000000000000000000000111110               | 00000000000000000000000000000000               |
 * | 6    | 6 | 00000000000000000000000000000000                | 0        | 00000000000000000000000000111110               | 00000000000000000000000001111100               | 00000000000000000000000001111100               | 00000000000000000000000000000000               |
 * | 7    | 7 | 00000000000000000000000000000000                | 0        | 00000000000000000000000001111100               | 00000000000000000000000011111000               | 00000000000000000000000011111000               | 00000000000000000000000000000000               |
 * | 8    | 8 | 00000000000000000000000000000000                | 0        | 00000000000000000000000011111000               | 00000000000000000000000111110000               | 00000000000000000000000111110000               | 00000000000000000000000000000000               |
 * | 9    | 9 | 00000000000000000000000000000000                | 0        | 00000000000000000000000111110000               | 00000000000000000000001111100000               | 00000000000000000000001111100000               | 00000000000000000000000000000000               |
 * | 10   | 10| 00000000000000000000000000000000                | 0        | 00000000000000000000001111100000               | 00000000000000000000011111000000               | 00000000000000000000011111000000               | 00000000000000000000000000000000               |
 * | 11   | 11| 00000000000000000000000000000000                | 0        | 00000000000000000000011111000000               | 00000000000000000000111110000000               | 00000000000000000000111110000000               | 00000000000000000000000000000000               |
 * | 12   | 12| 00000000000000000000000000000000                | 0        | 00000000000000000000111110000000               | 00000000000000000001111100000000               | 00000000000000000001111100000000               | 00000000000000000000000000000000               |
 * | 13   | 13| 00000000000000000000000000000000                | 0        | 00000000000000000001111100000000               | 00000000000000000111110000000000               | 00000000000000000111110000000000               | 00000000000000000000000000000000               |
 * | 14   | 14| 00000000000000000000000000000000                | 0        | 00000000000000000111110000000000               | 00000000000000001111100000000000               | 00000000000000001111100000000000               | 00000000000000000000000000000000               |
 * | 15   | 15| 00000000000000000000000000000000                | 0        | 00000000000000001111100000000000               | 00000000000000111110000000000000               | 00000000000000111110000000000000               | 00000000000000000000000000000000               |
 * | 16   | 16| 00000000000000000000000000000000                | 0        | 00000000000000111110000000000000               | 00000000000001111100000000000000               | 00000000000001111100000000000000               | 00000000000000000000000000000000               |
 * | 17   | 17| 00000000000000000000000000000000                | 0        | 00000000000001111100000000000000               | 00000000000011111000000000000000               | 00000000000011111000000000000000               | 00000000000000000000000000000000               |
 * | 18   | 18| 00000000000000000000000000000000                | 0        | 00000000000011111000000000000000               | 00000000000111110000000000000000               | 00000000000111110000000000000000               | 00000000000000000000000000000000               |
 * | 19   | 19| 00000000000000000000000000000000                | 0        | 00000000000111110000000000000000               | 00000000001111000000000000000000               | 00000000001111000000000000000000               | 00000000000000000000000000000000               |
 * | 20   | 20| 000000000000000000000000
 *
 * 00000000               | 0        | 00000000001111000000000000000000               | 00000000011110000000000000000000               | 00000000011110000000000000000000               | 00000000000000000000000000000000               |
 * | 21   | 21| 00000000000000000000000000000000               | 0        | 00000000011110000000000000000000               | 00000000111100000000000000000000               | 00000000111100000000000000000000               | 00000000000000000000000000000000               |
 * | 22   | 22| 00000000000000000000000000000000               | 0        | 00000000111100000000000000000000               | 00000001111000000000000000000000               | 00000001111000000000000000000000               | 00000000000000000000000000000000               |
 * | 23   | 23| 00000000000000000000000000000000               | 0        | 00000001111000000000000000000000               | 00000011110000000000000000000000               | 00000011110000000000000000000000               | 00000000000000000000000000000000               |
 * | 24   | 24| 00000000000000000000000000000000               | 0        | 00000011110000000000000000000000               | 00000111100000000000000000000000               | 00000111100000000000000000000000               | 00000000000000000000000000000000               |
 * | 25   | 25| 00000000000000000000000000000000               | 0        | 00000111100000000000000000000000               | 00001111000000000000000000000000               | 00001111000000000000000000000000               | 00000000000000000000000000000000               |
 * | 26   | 26| 00000000000000000000000000000000               | 0        | 00001111000000000000000000000000               | 00011110000000000000000000000000               | 00011110000000000000000000000000               | 00000000000000000000000000000000               |
 * | 27   | 27| 00000000000000000000000000000000               | 0        | 00011110000000000000000000000000               | 00111100000000000000000000000000               | 00111100000000000000000000000000               | 00000000000000000000000000000000               |
 * | 28   | 28| 00000000000000000000000000000000               | 0        | 00111100000000000000000000000000               | 01111000000000000000000000000000               | 01111000000000000000000000000000               | 00000000000000000000000000000000               |
 * | 29   | 29| 00000000000000000000000000000000               | 0        | 01111000000000000000000000000000               | 11110000000000000000000000000000               | 11110000000000000000000000000000               | 00000000000000000000000000000000               |
 * | 30   | 30| 00000000000000000000000000000000               | 0        | 11110000000000000000000000000000               | 11100000000000000000000000000000               | 11100000000000000000000000000000               | 00000000000000000000000000000000               |
 * | 31   | 31| 00000000000000000000000000000000               | 0        | 11100000000000000000000000000000               | 11000000000000000000000000000000               | 11000000000000000000000000000000               | 00000000000000000000000000000000               |
 *
 * ### Final Result
 * - After **32 iterations**, the final value of `reversedBits` will represent the reversed bit pattern of the original number.
 * - The expected output for the reversed bits of `11` (in binary `00000000000000000000000000001011`) will be `11010000000000000000000000000000` in binary.
 *
 * ### Conclusion
 * This dry run illustrates the step-by-step reversal of bits for a **32-bit integer**. The algorithm works by extracting the least significant bit of `n` and placing it in the correct position of `reversedBits` for a total of **32 iterations**.
 * **/